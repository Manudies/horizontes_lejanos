swagger: '2.0'
info:
  title: Task Management API
  description: API for managing tasks, projects, and users
  version: 1.0.0
basePath: /api
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
security:
  - bearerAuth: []
tags:
  - name: User
    description: User management
  - name: Project
    description: Project management
  - name: Task
    description: Task management
  - name: Invitation
    description: Invitation management
paths:
  /:
    get:
      summary: Get API greeting
      responses:
        '200':
          description: Successful response
  /users:
    get:
      summary: Get all users
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successful response
  /users/{userId}:
    get:
      summary: Get a user by ID
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
    put:
      summary: Update a user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successful response
    delete:
      summary: Delete a user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /users/byproperty:
    get:
      summary: Get users by property
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: property
          in: query
          required: true
          type: string
        - name: value
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /register:
    post:
      summary: Register a new user
      tags:
        - User
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successful response
  /login:
    post:
      summary: Login a user
      tags:
        - User
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Token'
  /projects:
    get:
      summary: Get all projects
      tags:
        - Project
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
    post:
      summary: Create a new project
      tags:
        - Project
      security:
        - bearerAuth: []
      parameters:
        - name: project
          in: body
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Successful response
  /projects/{projectId}:
    get:
      summary: Get a project by ID
      tags:
        - Project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Project'
    put:
      summary: Update a project
      tags:
        - Project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: project
          in: body
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Successful response
    delete:
      summary: Delete a project
      tags:
        - Project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /projects/{projectId}/user:
    post:
      summary: Add a user to a project
      tags:
        - Project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: userId
          in: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
      responses:
        '200':
          description: Successful response
    delete:
      summary: Remove a user from a project
      tags:
        - Project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: userId
          in: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
      responses:
        '200':
          description: Successful response
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
    post:
      summary: Create a new task
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: Successful response
  /tasks/{taskId}:
    get:
      summary: Get a task by ID
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Task'
    put:
      summary: Update a task
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: Successful response
    delete:
      summary: Delete a task
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /tasks/{taskId}/status:
    post:
      summary: Change task status
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
        - name: status
          in: body
          required: true
          schema:
            type: object
            properties:
              status:
                type: string
                enum:
                  - todo
                  - doing
                  - done
      responses:
        '200':
          description: Successful response
  /tasks/{taskId}/user:
    post:
      summary: Add a user to a task
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
        - name: userId
          in: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
      responses:
        '200':
          description: Successful response
    delete:
      summary: Remove a user from a task
      tags:
        - Task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
        - name: userId
          in: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
      responses:
        '200':
          description: Successful response
  /invitations:
    get:
      summary: Get all invitations
      tags:
        - Invitation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Invitation'
    post:
      summary: Create a new invitation
      tags:
        - Invitation
      security:
        - bearerAuth: []
      parameters:
        - name: invitation
          in: body
          required: true
          schema:
            $ref: '#/definitions/Invitation'
      responses:
        '200':
          description: Successful response
  /invitations/{invitationId}:
    get:
      summary: Get an invitation by ID
      tags:
        - Invitation
      security:
        - bearerAuth: []
      parameters:
        - name: invitationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Invitation'
    delete:
      summary: Delete an invitation
      tags:
        - Invitation
      security:
        - bearerAuth: []
      parameters:
        - name: invitationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /invitations/{invitationId}/accept:
    post:
      summary: Accept an invitation
      tags:
        - Invitation
      security:
        - bearerAuth: []
      parameters:
        - name: invitationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /invitations/{invitationId}/reject:
    post:
      summary: Reject an invitation
      tags:
        - Invitation
      security:
        - bearerAuth: []
      parameters:
        - name: invitationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful response
definitions:
  User:
    type: object
    properties:
      email:
        type: string
      username:
        type: string
      password:
        type: string
      passwordRepeat:
        type: string
      role:
        type: string
        enum:
          - user
          - admin
  Credentials:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Project:
    type: object
    properties:
      name:
        type: string
      owner:
        type: string
      users:
        type: array
        items:
          type: string
      tasks:
        type: array
        items:
          type: string
  Task:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      estimatedHours:
        type: number
      users:
        type: array
        items:
          type: string
      status:
        type: string
        enum:
          - todo
          - doing
          - done
      project:
        type: string
  Invitation:
    type: object
    properties:
      from:
        type: string
      to:
        type: string
      project:
        type: string
